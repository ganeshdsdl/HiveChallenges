Creating Table:

					create table parking2007
					(
					summons_number	int,
					plate_id	string,
					registration_state	string,
					plate_type	string,
					issue_date	string,
					violation_code	int,
					vehicle_body_type	string,
					vehicle_make	string,
					issuing_agency	string,
					street_code1	int,
					street_code2	int,
					street_code3	int,
					vehicle_expiration_date	int,
					violation_location	string,
					violation_precinct	int,
					issuer_precinct	int,
					issuer_code	int,
					issuer_command	string,
					issuer_squad	string,
					violation_time	string,
					time_first_observed	string,
					violation_county	string,
					violation_in_front_of_or_opposite	string,
					house_number	string,
					street_name	string,
					intersecting_street	string,
					date_first_observed	int,
					law_section	int,
					sub_division	string,
					violation_legal_code	string,
					days_parking_in_effect	string,
					from_hours_in_effect	string,
					to_hours_in_effect	string,
					vehicle_color	string,
					unregistered_vehicle	string,
					vehicle_year	int,
					meter_number	string,
					feet_from_curb	int,
					violation_post_code	string,
					violation_description	string,
					no_standing_or_stopping_violation	string,
					hydrant_violation	string,
					double_parking_violation	string
					)
					row format serde 'org.apache.hadoop.hive.serde2.OpenCSVSerde'                                                                           
					with serdeproperties ("separatorChar" = ",",  "quoteChar" = "\"", "escapeChar" = "\\")     
					tblproperties('skip.header.line.count'='1');
					

Note- Applying serde properties because the dataset has some strings with quote Characters 
------------------------------------------------------------------------------------------



load data local inpath '/home/cloudera/BIGDATA/Parking.csv'
into table parking2007;
					
					CREATE TABLE `parking2007_orc`(	
					`summons_number` int, 	
					`plate_id` string, 	
					`registration_state` string, 	
					`plate_type` string, 	
					`issue_date` date,
					`vehicle_make` string,
					`issuing_agency` string, 	
					`street_code1` int, 	
					`street_code2` int, 	
					`street_code3` int, 	
					`vehicle_expiration_date` date, 	
					`violation_location` string, 	
					`violation_precinct` int, 	
					`issuer_precinct` int, 	
					`issuer_code` int, 	
					`issuer_command` string, 	
					`issuer_squad` string, 	
					`violation_time` timestamp, 	
					`time_first_observed` timestamp, 	
					`violation_county` string, 	
					`violation_in_front_of_or_opposite` string, 	
					`house_number` string, 	
					`street_name` string, 	
					`intersecting_street` string, 	
					`date_first_observed` date, 	
					`law_section` int, 	
					`sub_division` string, 	
					`violation_legal_code` string, 	
					`days_parking_in_effect` string, 	
					`from_hours_in_effect` string, 	
					`to_hours_in_effect` string, 	
					`vehicle_color` string, 	
					`unregistered_vehicle` string, 	
					`vehicle_year` int, 	
					`meter_number` string, 	
					`feet_from_curb` int, 	
					`violation_post_code` string, 	
					`violation_description` string, 	
					`no_standing_or_stopping_violation` string, 	
					`hydrant_violation` string, 	
					`double_parking_violation` string)	
					PARTITIONED BY ( 	
					`violation_code` int, 	
					`vehicle_body_type` string)
					clustered by (issue_date) into 5 buckets;
					
					
Insering data
--------------
					insert into parking2007_orc partition(violation_code,  vehicle_body_type )
					select 
					summons_number,
					plate_id,
					registration_state,
					plate_type,
					from_unixtime(unix_timestamp(issue_date,'MM/dd/yyyy')) issue_date  ,
					vehicle_make,
					issuing_agency,
					street_code1,
					street_code2,
					street_code3,
					from_unixtime(unix_timestamp(cast(vehicle_expiration_date as string),'yyyyMMdd')) vehicle_expiration_date,
					violation_location,
					violation_precinct,
					issuer_precinct,
					issuer_code,
					issuer_command,
					issuer_squad,
					from_unixtime(unix_timestamp(
					concat(issue_date,' ',concat(violation_time,'M')),'MM/dd/yyyy hhmmaa')) violation_time,
					from_unixtime(unix_timestamp(
					concat(cast(date_first_observed as string),' ',concat(time_first_observed,'M')),'yyyyMMdd hhmmaa')) time_first_observed,
					violation_county,
					violation_in_front_of_or_opposite,
					house_number,
					street_name,
					intersecting_street,
					from_unixtime(unix_timestamp(
					cast(date_first_observed as string),'yyyyMMdd')) date_first_observed,
					law_section,
					sub_division,
					violation_legal_code,
					days_parking_in_effect,
					from_hours_in_effect,
					to_hours_in_effect,
					vehicle_color,
					unregistered_vehicle,
					vehicle_year,
					meter_number,
					feet_from_curb,
					violation_post_code,
					violation_description,
					no_standing_or_stopping_violation,
					hydrant_violation,
					double_parking_violation,
					violation_code,  
					vehicle_body_type
					from parking2007
					limit 100000
					
					
					
PART I:
--------


1.) Find the total number of tickets for the year.
					
					Select count(*) total_tickets from parking2007_orc;

2.) Find out how many unique states the cars which got parking tickets came from.

					SELECT distinct registration_state FROM parking2007_orc;

3.) Some parking tickets don’t have addresses on them, which is cause for concern. Find out how many such tickets there are(i.e. tickets where either "Street Code 1" or "Street Code 2" or "Street Code 3" is empty )

					SELECT count(*) FROM parking2007_orc 
					where street_code1 = ‘0’ or street_code2 = ‘0’ or street_code3 = ‘0’ 




PART II:
1.) How often does each violation code occur? (frequency of violation codes - find the top 5)

					SELECT violation_code, count(*) cnt
					FROM default.parking2007_orc
					GROUP BY violation_code
					order by cnt desc limit 5;

2.) How often does each vehicle body type get a parking ticket? How about the vehicle make? (find the top 5 for both)
					
					SELECT vehicle_body_type, count(*) cnt
					FROM parking2007_orc
					GROUP BY vehicle_body_type
					order by cnt desc limit 5;

					SELECT vehicle_make, count(*) cnt
					FROM parking2007_orc
					GROUP BY vehicle_make
					order by cnt desc limit 5;

3.) A precinct is a police station that has a certain zone of the city under its command. Find the (5 highest) frequencies of:
      a.) Violating Precincts (this is the precinct of the zone where the violation occurred)

									select violation_precinct, count(*) from parking2007_orc
									group by violation_precinct;



      b.) Issuer Precincts (this is the precinct that issued the ticket)

									select issuer_precinct, count(*) from parking2007_orc
									group by issuer_precinct;


4.) Find the violation code frequency across 3 precincts which have issued the most number of tickets - do these precinct zones have an exceptionally high frequency of certain violation codes?

					with cte as                                         --for getting count of violations in each precinct
					(
					SELECT issuer_precinct,
					violation_code,
					count(violation_code) over (partition by issuer_precinct) cnt
					FROM parking2007_orc
					
					),
					cte1 as                                             -- for getting violation count wrt each precinct and violation code.
					(
					select issuer_precinct, cnt precinct_viol_count, violation_code, count(*) Cnt_violations
					from cte 
					group by issuer_precinct, cnt, violation_code
					),
					cte2 as                                             -- ranking each precinct based on the no. of violations occured descending
					(
					select 
					issuer_precinct,violation_code,Cnt_violations, 
					dense_rank() over(order by precinct_viol_count desc) rnk
					from cte1
					)
					select issuer_precinct,violation_code,Cnt_violations from cte2
					where rnk<=3
					order by issuer_precinct, Cnt_violations desc

5.) Find out the properties of parking violations across different times of the day: The Violation Time field is specified in a strange format. Find a way to make this into a time attribute that you can use to divide into groups.

Handled the time field while loading into ORC table while inserting

6.) Divide 24 hours into 6 equal discrete bins of time. The intervals you choose are at your discretion. For each of these groups, find the 3 most commonly occurring violations

				with cte as-- for dividing time range into 6 bins
				(
				select 
				case 
				when cast(date_format(violation_time, 'H') as int) between 0 and 3 then '1st (0-3)'
				when cast(date_format(violation_time, 'H') as int) between 4 and 7 then '2nd (4-7)'
				when cast(date_format(violation_time, 'H') as int) between 8 and 11 then '3rd (8-11)'
				when cast(date_format(violation_time, 'H') as int) between 12 and 15 then '4th (12-15)'
				when cast(date_format(violation_time, 'H') as int) between 16 and 19 then '5th (16-19)'
				when cast(date_format(violation_time, 'H') as int) between 20 and 23 then '6th (20-23)'
				end time_group,
				violation_code
				from 
				parking2007_orc
				),
				cte1 as 
				(
				select
				time_group,
				violation_code,
				count(*) violations
				from cte
				group by time_group,
				violation_code),
				cte2 as 
				(
				select time_group, violation_code, violations,
				dense_rank() over (partition by time_group order by violations desc) rnk
				from cte1
				)
				select time_group, violation_code, violations  from cte2
				where rnk <=3
				
				
				
				with cte as
				(
				select 
				case 
				when cast(date_format(violation_time, 'H') as int) between 0 and 3 then '1st'
				when cast(date_format(violation_time, 'H') as int) between 4 and 7 then '2nd'
				when cast(date_format(violation_time, 'H') as int) between 8 and 11 then '3rd'
				when cast(date_format(violation_time, 'H') as int) between 12 and 15 then '4th'
				when cast(date_format(violation_time, 'H') as int) between 16 and 19 then '5th'
				when cast(date_format(violation_time, 'H') as int) between 20 and 23 then '6th'
				end time_group,
				violation_code
				from 
				parking2007_orc
				),
				cte1 as (
				select
				time_group,
				violation_code,
				count(*) violations
				from cte
				group by time_group,
				violation_code)
				select time_group, violation_code, violations,
				dense_rank() over (partition by time_group order by violations desc) rnk
				from cte1
				having rnk<=3


7.) Now, try another direction. For the 3 most commonly occurring violation codes, find the most common times of day (in terms of the bins from the previous part)


				with cte as-- for dividing time range into 6 bins
				(
				select 
				case 
				when cast(date_format(violation_time, 'H') as int) between 0 and 3 then '1st (0-3)'
				when cast(date_format(violation_time, 'H') as int) between 4 and 7 then '2nd (4-7)'
				when cast(date_format(violation_time, 'H') as int) between 8 and 11 then '3rd (8-11)'
				when cast(date_format(violation_time, 'H') as int) between 12 and 15 then '4th (12-15)'
				when cast(date_format(violation_time, 'H') as int) between 16 and 19 then '5th (16-19)'
				when cast(date_format(violation_time, 'H') as int) between 20 and 23 then '6th (20-23)'
				end time_group,
				violation_code,
				count(violation_code) over (partition by violation_code) violations
				from 
				parking2007_orc
				),
				cte1 as -- for getting 3 violation_codes with most violations
				(
				select 
				*,
				dense_rank() over (order by violations desc) most_viol_rnk
				
				from cte 
				)
				select violation_code, time_group, violations Total_Viol_under_code, 
				count(time_group) Total_Viol_under_timegroup
				from cte1 
				where most_viol_rnk<=3
				group by violation_code, time_group, violations
				order by violation_code, Total_Viol_under_timegroup desc


8.) Let’s try and find some seasonality in this data
      a.) First, divide the year into some number of seasons, and find frequencies of tickets for each season. (Hint: A quick Google search reveals the following seasons in NYC: Spring(March, April, May); Summer(June, July, August); Fall(September, October, November); Winter(December, January, February))
      b.)Then, find the 3 most common violations for each of these seasons.
	  

				with cte as 
				(
				select 
				case 
				when date_format(violation_time, 'MMM') in ('Mar','Apr','May') then 'Spring'
				when date_format(violation_time, 'MMM') in ('Jun','Jul','Aug') then 'Summer'
				when date_format(violation_time, 'MMM') in ('Sep','Oct','Nov') then 'Fall'
				when date_format(violation_time, 'MMM') in ('Dec','Jan','Feb') then 'Winter'
				end season,
				violation_code
				from 
				parking2007_orc
				),
				cte2 as 
				(
				select season, violation_code,
				count(*) violatons_per_season_per_code
				from cte
				group by season, violation_code
				),
				cte3 as (
				select season, violation_code,
				dense_rank() over(partition by season order by violatons_per_season_per_code desc) rnk
				from cte2
				)
				select season, violation_code from cte3
				where rnk<=3;
